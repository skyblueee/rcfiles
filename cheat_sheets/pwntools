# 程序交互
- 与远程服务交互    p = remote('ftp.ubuntu.com', 21)
- 与本地程序交互    p = process('/bin/sh', env={'LD_PRELOAD': './libc.so.6'})
- IO交互    p.send(), p.sendline(), p.sendafter('sth'), p.sendlineafter('sth')
            p.recv(), p.recvline(), p.recvuntil('sth'), p.recvrepeat()
- gdb交互   gdb.attach(p)
- 直接交互  p.interactive()
- 关闭交互  p.close()

# 数据打包(packing/unpacking)
- p32(0xdeadbeef) (== struct.pack('I', 0xdeadbeef))
- u32('abcd') (== struct.unpack('I', 'abcd')[0])
- u8('A') (== 0x41)

# context设置
## 体系结构
1. 利用context.binary = './binfile'来根据文件属性自动设置对应的体系架构变量值。
2. context(arch='i386', os='linux', endian='little')
或者
context.arch = 'arm'
context.os = 'linux'
context.endian = 'big'
context.word_size = 32
## log级别
context.log_level = 'debug'
## 超时
context.timeout = 0.2  # 为recvrepeat()使用创造条件。

# 汇编与反汇编
>>> asm('mov eax, 0').encode('hex')
'b800000000'
>>> print disasm('6a0258cd80ebf9'.decode('hex'))
   0:   6a 02                   push   0x2
   2:   58                      pop    eax
   3:   cd 80                   int    0x80
   5:   eb f9                   jmp    0x0

# shellcode
假设我们想获得这样一个shellcode：
1. setreuid(getuid(), getuid())
2. dup file descriptor 4 to stdin, stdout, and stderr
3. pop a shell
>>> asm(shellcraft.setreuid() + shellcraft.dupsh(4)).encode('hex')
'6a3158cd80...'

# 格式化字符串
FmtStr() : 自動化攻擊。
- fmtstr_payload(offset, {address:data}, numbwritten=0, write_size=’byte’) : 給定偏移，將指定地址修改爲特定值。

# 定位溢出位置
1. 使用cyclic(n)构造一个长度为n的字符串；(cyclic(200)=aaaabaaacaa...)
2. 使用该字符串溢出缓冲区，得到被溢出的返回地址；(假设EIP=0x62616166)
3. 使用cyclic_find(EIP_STR)定位偏移量。(cyclic_find('faab')=120)

# 读写ELF文件
>>> e = ELF('/bin/cat')
>>> print hex(e.got['write'])  # 0x60b070
>>> print hex(e.plt['write'])  # 0x401680
>>> e.read(e.address, 4)
'\x7fELF'
>>> e.asm(e.address, 'ret')
>>> e.save('/tmp/quiet-cat')
>>> disasm(file('/tmp/quiet-cat','rb').read(1))
'   0:   c3                      ret'

>>> libc = ELF('./libc.so.6')
>>> free_func = libc.symbols['free']

# ROP  # TODO

# 模拟其他体系结构计算机
## 要求
1. 安装QEMU模拟器：apt install qemu-user
2. 如果二进制文件是动态链接的，还需要下载动态链接库文件。以libc为例，命名规则是libc6-$ARCH-cross(例如libc-mips-cross)，如apt install libc-arm64-cross。其他库可以通过apt-cache search查找，例如apt-cache search 'libstdc++' | grep arm64
3. 告知QEMU动态链接库路径。QEMU假设动态库的路径为/etc/qemu-binfmt/aarch64，可以通过mkdir /etc/qemu-binfmt; ln -s /usr/aarch64-linux-gnu /etc/qemu-binfmt/aarch64来使QEMU找到动态库。
# 自动提交flag
from pwnlib.flag import submit_flag
submit_flag(flag_str, exploit='unnamed-exploit', target='unknown-target', server='flag-submission-server', port='31337', proto='tcp', team='unknown-team')

# pwntools还提供了一组可执行文件工具集合，运行pwn查看。

# pwnlib的结构
pwnlib
   |----adb  - 安卓调试桥
   |----args - 命令行参数解析
   |----asm  - 各种体系结构下的汇编与反汇编，利用汇编语言或字节码创建elf文件。
   |----atexception  - 捕获异常
   |----atexit   - 注册与卸载atexit句柄
   |----constants    - 从头文件中提取常量
   |----config   - pwntools配置文件
   |----context  - 设置运行时变量
   |----dynelf   - 利用泄露解析函数地址
   |----encoders - 对shellcode进行编码
   |----elf  - 针对elf文件的操作
   |     |----elf  - 操作elf文件
   |     |----config  - 解析内核配置
   |     |----corefile  - 解析内存转储文件
   |----exception  - pwnlib异常
   |----flag  - 提交flag
   |----fmtstr  - 格式化字符串漏洞利用
   |----gdb  - 与gdb协同
   |----libcdb  - 根据启发式算法获取libc二进制库特征
   |----log - 日志相关（这个在非ctf的python编程中也可以用）
   |----memleak - 内存泄露
   |----protocols   - 有线协议
   |     |----adb  - ADB协议
   |----qemu   - 特殊体系结构模拟器
   |----replacements   - 一些函数的更优的实现
   |----rop - ROP
   |     |----rop  - 生成ROP链
   |     |----srop  - SROP
   |----runner - 运行汇编语句和shellcode
   |----shellcraft  - 生成shellcode，根据体系结构和操作系统的不同组织了很多子模块
   |----term    - 终端操作
   |----timeout - 超时
   |----tubes   - 与世界交互（进程、串口、套接字、SSH）
   |----ui  - 用户交互
   |----update  - pwntools更新
   |----useragents  - 2万多个user agent字符串
   |----util
         |----crc    - 计算CRC校验和
         |----cyclic    - 独特码生成
         |----fiddling  - 操纵二进制bit（还是有很多好的工具函数，以后再研究）
         |----hashes    - 哈希函数
         |----iters - 对标准库itertools的拓展
         |----lists - 操纵列表
         |----misc  - 杂项
         |----net   - 网络接口
         |----packing   - 打包和解包
         |----proc  - 操纵/proc/
         |----safeeval  - 安全执行python程序
         |----sh_string - shell中的字符串
         |----web   - web工具(wget)
