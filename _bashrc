# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
	BASH_COMPLETION=/usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
	BASH_COMPLETION=/etc/bash_completion
  fi
fi

#===User========================================================================
export EDITOR='vim'
bind 'set completion-ignore-case on'
export HISTIGNORE='&:[ ]*:exit:ls:bg:fg:history:clear'

# app alias
alias pycharm='~/.prog/JetBrains/pycharm/bin/pycharm.sh > /dev/null &'
alias idea='~/.prog/JetBrains/idea/bin/idea.sh > /dev/null &'
alias clion='~/.prog/JetBrains/clion/bin/clion.sh > /dev/null &'
alias idaq='~/.prog/IDA_Pro_v6.4_Linux_and_Hex-Rays_Decompiler_ARM_x86_x64/idaq'
alias idaq64='~/.prog/IDA_Pro_v6.4_Linux_and_Hex-Rays_Decompiler_ARM_x86_x64/idaq64'
alias docx2txt='~/bin/docx2txt-1.4/docx2txt.sh'
alias typora='typora_fun(){ ~/.prog/Typora-linux-x64/Typora $1 & }; typora_fun $1'
alias gdb='gdb -q'
#alias gdb-emacs='gdb_emacs() { emacs -l ~/rcfiles/_emacs -nw --eval "(gdb \"gdb -q --annotate=3 -i=mi $*\")"; }; gdb_emacs'
#alias gdb-emacs='gdb_emacs() { emacs -nw --eval "(gdb \"gdb -q --annotate=3 -i=mi $*\")"; }; gdb_emacs'
alias mux='tmuxinator'
alias ip3='ipython3'
alias checksec='~/bin/checksec.sh/checksec'
alias mancpp='cppman'
alias manasm='~/bin/go/bin/cgasm'
alias du='ncdu'
alias wgetR='wget -m -p -np -k'
alias grep='grep --color=auto'
alias git='LC_ALL=C git'
alias ll='ls -lh'
alias open='xdg-open'
alias john='~/bin/JohnTheRipper/run/john'

# ctf tools
alias ctf-str2hex='~/bin/ctf-tools/str2hex.py'
alias ctf-hex2str='~/bin/ctf-tools/hex2str.py'
alias ctf-urldecode='~/bin/ctf-tools/urldecode.py'
alias ctf-b64decode='~/bin/ctf-tools/b64decode.py'
alias ctf-b64encode='~/bin/ctf-tools/b64encode.py'
alias ctf-xxencode='~/bin/ctf-tools/xxencode.py'
alias ctf-jpgeofx='~/bin/ctf-tools/jpegeofx.py'
alias ctf-ida_dbg_linux_server32='~/bin/ctf-tools/linux_server'
alias ctf-ida_dbg_linux_server64='~/bin/ctf-tools/linux_server64'
libc-add(){ echo "cd ~/bin/ctf-tools/libc-database; ./add $@" | bash; }
libc-get(){ echo "cd ~/bin/ctf-tools/libc-database; ./get $@" | bash; }
libc-find(){ echo "cd ~/bin/ctf-tools/libc-database; ./find $@" | bash; }
libc-dump(){ echo "cd ~/bin/ctf-tools/libc-database; ./dump $@" | bash; }
libc-identify(){ echo "cd ~/bin/ctf-tools/libc-database; ./identify $@" | bash; }
ctf-stegsolve(){ java -jar ~/bin/ctf-tools/Stegsolve.jar & }

ctf-codi() { vim -c "Codi" "$@"; }

# golang
export GOPATH=~/bin/go

# Completion
# chinese completion
source ~/bin/pinyin_completion/chs_completion.sh
# tmux completion
source ~/rcfiles/tmuxinator_completion.bash
# fuzzy completion
export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
export FZF_COMPLETION_TRIGGER='//'
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
# bazel completion
source /usr/local/lib/bazel/bin/bazel-complete.bash
# john completion
source ~/bin/JohnTheRipper/run/john.bash_completion

# autojump
. /usr/share/autojump/autojump.sh

# python startup
export PYTHONSTARTUP=~/rcfiles/pythonrc.py

# map CapsLock
xmodmap ~/rcfiles/_xmodmaprc

# cheat
export DEFAULT_CHEAT_DIR='~/rcfiles/cheat_sheets/'
export CHEATCOLORS=true
function _cheat_autocomplete {
    sheets=$(cheat -l | cut -d' ' -f1)
    COMPREPLY=()
    if [ $COMP_CWORD = 1 ]; then
	COMPREPLY=(`compgen -W "$sheets" -- $2`)
    fi
}
complete -F _cheat_autocomplete cheat

# Automatically change the directory in bash after closing ranger
# copied from /usr/share/doc/ranger/examples/bash_automatic_cd.sh
# This is a bash function for .bashrc to automatically change the directory to
# the last visited one after ranger quits.
# To undo the effect of this function, you can type "cd -" to return to the
# original directory.
function ranger-cd {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    /usr/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}
bind '"\C-o":"ranger-cd\C-m"' # This binds Ctrl-O to ranger-cd

# extract and compress
extract() {
    if [ -f $1 ] ; then
        case $1 in
        *.tar.bz2)   tar -xvjf  $1    ;;
        *.tar.gz)    tar -xvzf  $1    ;;
        *.tar.xz)    tar -xvJf  $1    ;;
        *.bz2)       bunzip2    $1    ;;
        *.rar)       rar x      $1    ;;
        *.gz)        gunzip     $1    ;;
        *.tar)       tar -xvf   $1    ;;
        *.tbz2)      tar -xvjf  $1    ;;
        *.tgz)       tar -xvzf  $1    ;;
        *.zip)       unzip      $1    ;;
        *.Z)         uncompress $1    ;;
        *.7z)        7z x       $1    ;;
        *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

compress() {
    if [ -n "$1" ] ; then
        FILE=$1
        case $FILE in
        *.tar) shift && tar -cf $FILE $* ;;
        *.tar.bz2) shift && tar -cjf $FILE $* ;;
        *.tar.xz) shift && tar -cJf $FILE $* ;;
        *.tar.gz) shift && tar -czf $FILE $* ;;
        *.tgz) shift && tar -czf $FILE $* ;;
        *.zip) shift && zip $FILE $* ;;
        *.rar) shift && rar $FILE $* ;;
        esac
    else
        echo "usage: compress <foo.tar.gz> ./foo ./bar"
    fi
}
